#!/usr/bin/env node
var e=require("commander"),n=require("path"),r=require("fs-extra"),o=new e.Command;o.version("0.0.4");var t={pro:function(e){try{var o=n.resolve(e),t=n.join(__dirname,"../templates/root-project"),i=function(i,c){try{var a=Promise.resolve(r.copy(t,o)).then(function(){var t=require("child_process").spawn,i=function(e){try{require(n.join(e,"package.json"))}catch(e){return{}}}(o),c=t("npx",["lerna","bootstrap"],{stdio:"inherit",cwd:o});return i.name=e,Promise.resolve(r.writeFile(n.join(o,"package.json"),JSON.stringify(i,void 0,2))).then(function(){c.on("close",function(){})})})}catch(e){return}return a&&a.then?a.then(void 0,function(){}):a}();return Promise.resolve(i&&i.then?i.then(function(){}):void 0)}catch(e){return Promise.reject(e)}},pack:function(e){try{var o=require("child_process").spawn,t="@"+(function(){var e;try{e=require(n.resolve("package.json"))}catch(n){e={}}return e}().name||"unknown")+"/"+e,i=n.join(__dirname,"../templates/package"),c=n.resolve("packages/"+e),a=function(e,a){try{var s=Promise.resolve(r.copy(i,c)).then(function(){var e=n.join(c,"package.json"),i=require(e),a=o("npx",["lerna","bootstrap"],{stdio:"inherit"});return i.name=t,Promise.resolve(r.writeFile(e,JSON.stringify(i,void 0,2))).then(function(){a.on("close",function(){})})})}catch(e){return a(e)}return s&&s.then?s.then(void 0,a):s}(0,function(e){console.log(e)});return Promise.resolve(a&&a.then?a.then(function(){}):void 0)}catch(e){return Promise.reject(e)}}};!function(e){e.command("g <type> [name]").description("创建文件").action(function(e,n){if(void 0===n&&(n="unknown"),!(e in t)||"function"!=typeof t[e])throw new TypeError("搞出问题了！没有对应模式!!");t[e](n)})}(o),o.version("0.0.4"),o.parse(process.argv);
//# sourceMappingURL=index.js.map
