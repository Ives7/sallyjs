#!/usr/bin/env node
var e=require("commander"),n=require("path"),r=require("simple-git"),t=require("fs-extra");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=o(r),c=new e.Command,a=require("child_process").spawn,u={pro:function(e){try{var r=n.resolve(e),o=n.join(__dirname,"../templates/root-project"),c=function(c,u){try{var s=Promise.resolve(t.copy(o,r)).then(function(){return Promise.resolve(i.default().cwd(r).init()).then(function(){var o=function(e){try{return require(n.join(e,"package.json"))}catch(e){return{}}}(r),i=a("npx",["lerna","bootstrap"],{stdio:"inherit",cwd:r});return o.name=e,Promise.resolve(t.writeFile(n.join(r,"package.json"),JSON.stringify(o,void 0,2))).then(function(){i.on("close",function(){})})})})}catch(e){return u(e)}return s&&s.then?s.then(void 0,u):s}(0,function(e){console.log(e)});return Promise.resolve(c&&c.then?c.then(function(){}):void 0)}catch(e){return Promise.reject(e)}},pack:function(e){try{var r=require("child_process").spawn,o="@"+(function(){var e;try{e=require(n.resolve("package.json"))}catch(n){e={}}return e}().name||"unknown")+"/"+e,i=n.join(__dirname,"../templates/package"),c=n.resolve("packages/"+e),a=function(e,a){try{var u=Promise.resolve(t.copy(i,c)).then(function(){var e=n.join(c,"package.json"),i=require(e),a=r("npx",["lerna","bootstrap"],{stdio:"inherit"});return i.name=o,Promise.resolve(t.writeFile(e,JSON.stringify(i,void 0,2))).then(function(){a.on("close",function(){})})})}catch(e){return a(e)}return u&&u.then?u.then(void 0,a):u}(0,function(e){console.log(e)});return Promise.resolve(a&&a.then?a.then(function(){}):void 0)}catch(e){return Promise.reject(e)}}};!function(e){e.command("g <type> [name]").description("创建文件").action(function(e,n){if(void 0===n&&(n="unknown"),!(e in u)||"function"!=typeof u[e])throw new TypeError("搞出问题了！没有对应模式!!");u[e](n)})}(c),c.parse(process.argv);
//# sourceMappingURL=index.js.map
